generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int      @id @default(autoincrement())
    uuid          String   @default(uuid())
    email         String   @unique
    firstName     String
    lastName      String
    password      String
    status        Boolean  @default(true)
    locked        Boolean  @default(false)
    role          Role     @default(USER)
    public        Boolean  @default(true)
    profileImgUrl String?  @default("")
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    trips                 Trip[]
    favorites             Favorite[]
    activities            UserToActivities[]
    notificationsReceiver Notification[]              @relation("receiver")
    notificationsSender   Notification[]              @relation("sender")
    receivedInvitations   UserToReceivedInvitations[]
    sentInvitations       UserToSentInvitations[]
}

model Trip {
    id            Int      @id @default(autoincrement())
    uuid          String   @default(uuid())
    userId        Int?
    name          String
    description   String?
    public        Boolean
    dateFrom      DateTime
    dateTo        DateTime
    adults        Int
    children      Int?     @default(0)
    infants       Int?     @default(0)
    backgroundUrl String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    user          User?                 @relation(fields: [userId], references: [id])
    favorites     Favorite[]
    activities    Activity[]
    locations     Location[]
    preparations  Preparation[]
    notifications NotificationToTrips[]

    @@unique([userId, id])
}

model Activity {
    id                   Int      @id @default(autoincrement())
    uuid                 String   @default(uuid())
    tripId               Int?
    activityTypeId       Int
    transportationTypeId Int
    name                 String
    description          String
    location             String
    date                 DateTime
    timezone             String
    public               Boolean
    maxPeople            Int
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    trip               Trip?                      @relation(fields: [tripId], references: [id])
    activityType       ActivityType               @relation(fields: [activityTypeId], references: [id])
    transportationType TransportationType         @relation(fields: [transportationTypeId], references: [id])
    users              UserToActivities[]
    notificattions     NotificationToActivities[]
    invitations        Invitation[]

    @@unique([tripId, id])
}

model Invitation {
    id         Int              @id @default(autoincrement())
    uuid       String           @default(uuid())
    activityId Int?
    email      String
    token      String
    status     InvitationStatus @default(PENDING)
    expiresAt  DateTime
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @updatedAt

    activity            Activity?                   @relation(fields: [activityId], references: [id])
    receivedInvitations UserToReceivedInvitations[]
    sentInvitations     UserToSentInvitations[]

    @@unique([email, activityId, id])
}

model ActivityType {
    id        Int      @id @default(autoincrement())
    uuid      String   @default(uuid())
    name      String
    type      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    activities Activity[]
}

model TransportationType {
    id        Int      @id @default(autoincrement())
    uuid      String   @default(uuid())
    name      String
    type      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    activities Activity[]
}

model Location {
    id        Int      @id @default(autoincrement())
    uuid      String   @default(uuid())
    tripId    Int?
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    trip Trip? @relation(fields: [tripId], references: [id])
}

model Preparation {
    id          Int      @id @default(autoincrement())
    uuid        String   @default(uuid())
    tripId      Int?
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    trip            Trip?            @relation(fields: [tripId], references: [id])
    subPreparations SubPreparation[]
}

model SubPreparation {
    id            Int      @id @default(autoincrement())
    uuid          String   @default(uuid())
    preparationId Int?
    name          String
    status        Boolean? @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    preparation Preparation? @relation(fields: [preparationId], references: [id])
}

model Favorite {
    id        Int      @id @default(autoincrement())
    uuid      String   @default(uuid())
    userId    Int?
    tripId    Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User? @relation(fields: [userId], references: [id])
    trip Trip? @relation(fields: [tripId], references: [id])

    @@unique([userId, tripId])
}

model Notification {
    id             Int              @id @default(autoincrement())
    uuid           String           @default(uuid())
    receiverUserId Int?
    senderUserId   Int?
    resourceId     Int
    type           NotificationType
    read           Boolean          @default(false)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt

    receiver   User?                      @relation("receiver", fields: [receiverUserId], references: [id])
    sender     User?                      @relation("sender", fields: [senderUserId], references: [id])
    trips      NotificationToTrips[]
    activities NotificationToActivities[]
}

model NotificationToTrips {
    notificationId Int
    tripId         Int

    notification Notification @relation(fields: [notificationId], references: [id])
    trip         Trip         @relation(fields: [tripId], references: [id])

    @@id([notificationId, tripId])
}

model NotificationToActivities {
    notificationId Int
    activityId     Int

    notification Notification @relation(fields: [notificationId], references: [id])
    activity     Activity     @relation(fields: [activityId], references: [id])

    @@id([notificationId, activityId])
}

model UserToActivities {
    userId     Int
    activityId Int

    user     User     @relation(fields: [userId], references: [id])
    activity Activity @relation(fields: [activityId], references: [id])

    @@id([userId, activityId])
    @@unique([userId, activityId])
}

model UserToReceivedInvitations {
    invitationId Int
    userId       Int

    invitation Invitation @relation(fields: [invitationId], references: [id])
    user       User       @relation(fields: [userId], references: [id])

    @@id([userId, invitationId])
    @@unique([userId, invitationId])
}

model UserToSentInvitations {
    invitationId Int
    userId       Int

    invitation Invitation @relation(fields: [invitationId], references: [id])
    user       User       @relation(fields: [userId], references: [id])

    @@id([userId, invitationId])
    @@unique([userId, invitationId])
}

enum Role {
    USER
    ADMIN
}

enum NotificationType {
    ACTIVITY_INVITATION_SENT
    ACTIVITY_JOIN_REQUEST
    UPCOMING_TRIP
    UPCOMING_ACTIVITY
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    REJECTED
}
